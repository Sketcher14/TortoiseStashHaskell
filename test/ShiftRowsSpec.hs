module ShiftRowsSpec
  ( runTests
  ) where

import Test.Tasty
import Test.Tasty.HUnit

import AES128.Encryption
import AES128.Decryption
import AES128.ExpandedKey
import AES128.Utils

runTests :: TestTree
runTests = testGroup " ShiftRows, invShiftRows functions" [shiftRowsTest, invShiftRowsTest]

key :: Key
key = Key128 [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]

blockEncR1AfterSub :: Block
blockEncR1AfterSub = Block [0x09, 0x08, 0x62, 0xbf, 0x6f, 0x28, 0xe3, 0x04, 0x2c, 0x74, 0x7f, 0xee, 0xda, 0x4a, 0x6a, 0x47]

blockEncR1AfterSR :: Block
blockEncR1AfterSR = Block [0x09, 0x28, 0x7f, 0x47, 0x6f, 0x74, 0x6a, 0xbf, 0x2c, 0x4a, 0x62, 0x04, 0xda, 0x08, 0xe3, 0xee]

blockEncR9AfterSub :: Block
blockEncR9AfterSub = Block [0x83, 0x0e, 0xb4, 0xed, 0xff, 0x33, 0x81, 0x09, 0xc1, 0x15, 0xf0, 0x5e, 0x77, 0x91, 0xa6, 0xaf]

blockEncR9AfterSR :: Block
blockEncR9AfterSR = Block [0x83, 0x33, 0xf0, 0xaf, 0xff, 0x15, 0xa6, 0xed, 0xc1, 0x91, 0xb4, 0x09, 0x77, 0x0e, 0x81, 0x5e]

blockDecR7AfterInvSub :: Block
blockDecR7AfterInvSub = Block [0xcd, 0xb3, 0x39, 0xf7, 0x7e, 0xb9, 0xbc, 0x13, 0x93, 0xd3, 0xc0, 0x19, 0x2b, 0x4d, 0xba, 0xff]

blockDecR7AfterInvSR :: Block
blockDecR7AfterInvSR = Block [0xcd, 0x4d, 0xc0, 0x13, 0x7e, 0xb3, 0xba, 0x19, 0x93, 0xb9, 0x39, 0xff, 0x2b, 0xd3, 0xbc, 0xf7]

blockDecR3AfterInvSub :: Block
blockDecR3AfterInvSub = Block [0xfd, 0x0c, 0xd8, 0xf8, 0x4b, 0xfc, 0xbb, 0xdb, 0xf7, 0xa9, 0x7c, 0x1b, 0x4a, 0xf3, 0x8c, 0xe9]

blockDecR3AfterInvSR :: Block
blockDecR3AfterInvSR = Block [0xfd, 0xf3, 0x7c, 0xdb, 0x4b, 0x0c, 0x8c, 0x1b, 0xf7, 0xfc, 0xd8, 0xe9, 0x4a, 0xa9, 0xbb, 0xf8]

shiftRowsTest :: TestTree
shiftRowsTest =
  testCase
    "Checks shiftRows works correctness" $ do
      assertEqual "Test01" (stateToBlock $ shiftRows $ blockToState blockEncR1AfterSub) blockEncR1AfterSR
      assertEqual "Test02" (stateToBlock $ shiftRows $ blockToState blockEncR9AfterSub) blockEncR9AfterSR

invShiftRowsTest :: TestTree
invShiftRowsTest =
  testCase
    "Checks invShiftRows works correctness" $ do
      assertEqual "Test01" (stateToBlock $ invShiftRows $ blockToState blockDecR7AfterInvSub) blockDecR7AfterInvSR
      assertEqual "Test02" (stateToBlock $ invShiftRows $ blockToState blockDecR3AfterInvSub) blockDecR3AfterInvSR